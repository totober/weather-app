(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var o=e.g.document;if(!t&&o&&(o.currentScript&&(t=o.currentScript.src),!t)){var c=o.getElementsByTagName("script");if(c.length)for(var n=c.length-1;n>-1&&!t;)t=c[n--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.p;class t{constructor(e){this.weatherText=e.condition.text,this.weatherIcon=e.condition.icon,this.cloud=e.cloud,this.tempC=e.temp_c,this.tempF=e.temp_f,this.tempC_feel=e.feelsike_c,this.tempF_feel=e.feelsike_f,this.humidity=e.humidity,this.wind=e.wind_kph,this.precipitation=e.precip_mm,this.isDay=e.is_day}}document.querySelector("div").textContent="no la habias creado salamin!!!",async function(){let e=await fetch("http://api.weatherapi.com/v1/current.json?key=6401a6548a224689902171841233012&q=Buenos-Aires"),o=await e.json();console.log(o);let c=await fetch("http://api.weatherapi.com/v1/forecast.json?key=6401a6548a224689902171841233012&q=Buenos-Aires&days=3"),n=await c.json();console.log(n);let r=await fetch("http://api.weatherapi.com/v1/history.json?key=6401a6548a224689902171841233012&q=Buenos-Aires&dt=2024-01-07"),i=await r.json();console.log(i),function(){let e=[],t=Object.getOwnPropertyNames(o.current);console.log(t);let c=Object.getOwnPropertyNames(n.current);console.log(c);let r=n.forecast.forecastday,a=i.forecast.forecastday;console.log(r),console.log(a);let s=r[0].day,l=a[0].day;console.log(s),console.log(l);let h=Object.getOwnPropertyNames(s);console.log(h);let p=Object.getOwnPropertyNames(l);console.log(p);let u=r[0].hour[0],g=a[0].hour[0];console.log(u),console.log(g);let m=Object.getOwnPropertyNames(u),f=Object.getOwnPropertyNames(g);console.log(m),console.log(f),console.log(),m.forEach((t=>{f.forEach((o=>{t===o&&e.push(t)}))})),console.log("idem:",e)}();try{let e=function(e){let t=e.location;return{localTime:t.localtime,name:t.name,country:t.country}}(o),c=function(e){let o=e.current;return new t(o)}(o);return{locationObj:e,weatherObj:c}}catch(e){console.log(e)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,