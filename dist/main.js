(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var o=t.g.document;if(!e&&o&&(o.currentScript&&(e=o.currentScript.src),!e)){var r=o.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.p;class e{constructor(t){this.weatherText=t.condition.text,this.weatherIcon=t.condition.icon,this.cloud=t.cloud,this.tempC=t.temp_c,this.tempF=t.temp_f,this.tempC_feel=t.feelslike_c,this.tempF_feel=t.feelslike_f,this.humidity=t.humidity,this.wind=t.wind_kph,this.precipitation=t.precip_mm,this.isDay=t.is_day}}class o extends e{constructor(t){super(t),this.snow=t.snow_cm,this.snowChance=t.chance_of_snow}}document.querySelector("div").textContent="no la habias creado salamin!!!",console.log("dmx"),async function(){let t=await fetch("http://api.weatherapi.com/v1/current.json?key=6401a6548a224689902171841233012&q=Buenos-Aires"),r=await t.json();console.log(r);let n=await fetch("http://api.weatherapi.com/v1/forecast.json?key=6401a6548a224689902171841233012&q=Buenos-Aires&days=3"),c=await n.json();console.log(c);let a=await fetch("http://api.weatherapi.com/v1/history.json?key=6401a6548a224689902171841233012&q=Buenos-Aires&dt=2024-01-07"),s=await a.json();console.log(s),function(){let t=[],e=Object.getOwnPropertyNames(r.current);console.log(e);let o=Object.getOwnPropertyNames(c.current),n=c.forecast.forecastday,a=s.forecast.forecastday;console.log(n);let i=n[0].day,l=a[0].day,h=(Object.getOwnPropertyNames(i),Object.getOwnPropertyNames(l),n[0].hour[0]),u=a[0].hour[0],p=Object.getOwnPropertyNames(h);Object.getOwnPropertyNames(u),p.forEach((e=>{o.forEach((o=>{e===o&&t.push(e)}))})),console.log("idem:",t)}();try{let t=function(t){let e=t.location;return{localTime:e.localtime,name:e.name,country:e.country}}(r),n=function(t){let o=new e(t.current);return console.log(o),o}(r);return function(t){let e=t.forecast.forecastday;console.log(e),console.log("laman");let[r,n,c]=e,a=r.hour.map((t=>new o(t)));console.log("hourArr:",a[5]),console.log("today:",r.hour[5])}(c),{locationObj:t,weatherObj:n}}catch(t){console.log(t)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,